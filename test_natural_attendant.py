#!/usr/bin/env python3
"""
Teste de atendente natural - respostas curtas e conversacionais
Simula a conversa mostrada pelo usu√°rio
"""

import json
import requests
import time

API_URL = "http://localhost:8000/api/v1/chat/completions"

# System prompt NATURAL E CONCISO
SYSTEM_PROMPT = """Voc√™ √© um atendente da Central de Atendimento Unimed Natal.

REGRAS DE OURO:
1. Seja breve e natural - fale como um atendente humano real
2. NUNCA despeje todos os dados do contrato de uma vez
3. Responda APENAS o que foi perguntado
4. Use linguagem conversacional, n√£o formal demais
5. Se j√° consultou dados, N√ÉO repita tudo - use o contexto

COLETA DE DADOS:
- Se o cliente n√£o forneceu CPF e data de nascimento, pe√ßa educadamente
- NUNCA invente ou assuma valores como 01/01/1990 ou 00000000000
- S√≥ consulte quando tiver AMBOS os dados reais

AP√ìS CONSULTA BEM-SUCEDIDA:
- Confirme que encontrou: "Encontrei seu cadastro, [Nome]. Como posso ajudar?"
- N√ÉO liste todos os campos (cpf, carteira, pagador, etc)
- Responda perguntas espec√≠ficas de forma direta

QUANDO N√ÉO SOUBER:
- Se a pergunta n√£o √© sobre dados do contrato (ex: empr√©stimos, segunda via)
- Seja direto: "Essa informa√ß√£o n√£o est√° dispon√≠vel no sistema que tenho acesso."
- Ofere√ßa alternativa: "Posso transferir para o setor espec√≠fico."

SAUDA√á√ïES:
- Cumprimente de forma natural: "Ol√°! Como posso ajudar?"
- N√£o pe√ßa dados logo de cara, s√≥ se o cliente pedir consulta"""


def call_api(messages, include_tools=True):
    """Faz chamada √† API"""
    payload = {
        "model": "paneas-q32b",
        "messages": [
            {"role": "system", "content": SYSTEM_PROMPT},
            *messages
        ],
        "max_tokens": 150,  # Limitar para respostas curtas
        "temperature": 0.7
    }

    if include_tools:
        payload["tools"] = [{
            "type": "function",
            "function": {
                "name": "unimed_consult",
                "description": "Consulta dados do benefici√°rio Unimed.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "base_url": {
                            "type": "string",
                            "default": "https://unimed-central-cobranca.paneas.net/api/v1"
                        },
                        "cidade": {"type": "string", "default": "Natal_Tasy"},
                        "tipo": {"type": "string", "default": "Contratos"},
                        "protocolo": {"type": "string", "default": "0"},
                        "cpf": {"type": "string"},
                        "data_nascimento": {"type": "string", "description": "Formato DDMMAAAA"}
                    },
                    "required": ["cpf", "data_nascimento"]
                }
            }
        }]
        payload["tool_choice"] = "auto"

    return payload


def simulate_conversation():
    """Simula a conversa exata do exemplo do usu√°rio"""

    print("="*80)
    print("üß™ TESTE: CONVERSA NATURAL E CONCISA")
    print("="*80)

    # Hist√≥rico de mensagens
    messages = []

    # Turno 1: Bom dia
    print("\n" + "="*60)
    print("TURNO 1: Sauda√ß√£o")
    print("="*60)
    user_msg = "bom dia"
    print(f"üë§ USER: {user_msg}")

    messages.append({"role": "user", "content": user_msg})
    payload = call_api(messages)

    print("\nüì§ Payload enviado:")
    print(json.dumps(payload, indent=2, ensure_ascii=False)[:500])

    # Simular resposta esperada
    expected = "Ol√°! Como posso ajudar?"
    print(f"\n‚úÖ ESPERADO: {expected}")
    print(f"‚ùå ATUAL: Para realizar a consulta, eu preciso do CPF e da data de nascimento...")
    print("‚ö†Ô∏è  PROBLEMA: Pede dados logo de cara, sem esperar o cliente dizer o que quer")

    messages.append({"role": "assistant", "content": expected})

    # Turno 2: Fornece CPF e nascimento
    print("\n" + "="*60)
    print("TURNO 2: Cliente fornece dados")
    print("="*60)
    user_msg = "Meu cpf √© 00835690490 e nascimento 28031979"
    print(f"üë§ USER: {user_msg}")

    messages.append({"role": "user", "content": user_msg})
    payload = call_api(messages)

    print("\nüì§ Payload enviado:")
    print(json.dumps(payload, indent=2, ensure_ascii=False)[:500])

    expected = "Encontrei seu cadastro, Kelly. Como posso ajudar?"
    print(f"\n‚úÖ ESPERADO: {expected}")
    print(f"‚ùå ATUAL: Lista TODOS os dados (Nome, CPF, Carteira, Pagador, Plano...)")
    print("‚ö†Ô∏è  PROBLEMA: Despeja tudo, n√£o √© natural")

    # Simular que j√° consultou
    messages.append({"role": "assistant", "content": expected})

    # Turno 3: Pergunta sobre vencimento
    print("\n" + "="*60)
    print("TURNO 3: Pergunta espec√≠fica")
    print("="*60)
    user_msg = "Poderia me informar a data de vencimento do meu contrato?"
    print(f"üë§ USER: {user_msg}")

    messages.append({"role": "user", "content": user_msg})
    payload = call_api(messages)

    print("\nüì§ Payload enviado:")
    print(json.dumps(payload, indent=2, ensure_ascii=False)[:500])

    expected = "Seu contrato √© cobrado por boleto mensal, Kelly. A data de vencimento vem impressa no boleto. Posso ajudar com mais algo?"
    print(f"\n‚úÖ ESPERADO: {expected}")
    print(f"‚ùå ATUAL: Repete explica√ß√£o longa sobre boletos + 'Estou aqui para ajudar!'")
    print("‚ö†Ô∏è  PROBLEMA: Muito formal e longo")

    messages.append({"role": "assistant", "content": expected})

    # Turno 4: Pergunta fora do escopo
    print("\n" + "="*60)
    print("TURNO 4: Pergunta fora do escopo")
    print("="*60)
    user_msg = "Quero saber sobre empr√©stimos consignados"
    print(f"üë§ USER: {user_msg}")

    messages.append({"role": "user", "content": user_msg})
    payload = call_api(messages)

    print("\nüì§ Payload enviado:")
    print(json.dumps(payload, indent=2, ensure_ascii=False)[:500])

    expected = "N√£o tenho acesso a informa√ß√µes sobre empr√©stimos consignados aqui. Posso transferir voc√™ para o financeiro. Quer que eu fa√ßa isso?"
    print(f"\n‚úÖ ESPERADO: {expected}")
    print(f"‚ùå ATUAL: Repete TODOS os dados do contrato novamente + tenta explicar empr√©stimos")
    print("‚ö†Ô∏è  PROBLEMA: Repete dados desnecessariamente, n√£o √© direto")

    messages.append({"role": "assistant", "content": expected})

    # Turno 5: Segunda via carteirinha
    print("\n" + "="*60)
    print("TURNO 5: Outra pergunta fora do escopo")
    print("="*60)
    user_msg = "Como posso emitir a segunda via da carteirinha?"
    print(f"üë§ USER: {user_msg}")

    messages.append({"role": "user", "content": user_msg})
    payload = call_api(messages)

    print("\nüì§ Payload enviado:")
    print(json.dumps(payload, indent=2, ensure_ascii=False)[:500])

    expected = "Voc√™ pode emitir pelo app Unimed ou no site na √°rea do cliente. Precisa de ajuda com o acesso?"
    print(f"\n‚úÖ ESPERADO: {expected}")
    print(f"‚ùå ATUAL: Repete TODOS os dados do contrato NOVAMENTE")
    print("‚ö†Ô∏è  PROBLEMA: Completamente fora de contexto, repetitivo")

    messages.append({"role": "assistant", "content": expected})

    # Turno 6: Incluir dependente
    print("\n" + "="*60)
    print("TURNO 6: Pergunta processual")
    print("="*60)
    user_msg = "Como fa√ßo para incluir um dependente?"
    print(f"üë§ USER: {user_msg}")

    messages.append({"role": "user", "content": user_msg})
    payload = call_api(messages)

    print("\nüì§ Payload enviado:")
    print(json.dumps(payload, indent=2, ensure_ascii=False)[:500])

    expected = "Para incluir dependente no seu plano coletivo empresarial, voc√™ precisa solicitar atrav√©s do RH da empresa (CEI). Eles fazem a inclus√£o. Mais alguma d√∫vida?"
    print(f"\n‚úÖ ESPERADO: {expected}")
    print(f"‚ùå ATUAL: [preciso testar para ver]")

    print("\n" + "="*80)
    print("üìã RESUMO DOS PROBLEMAS IDENTIFICADOS")
    print("="*80)
    print("""
1. ‚ùå Pede dados logo na sauda√ß√£o (deveria cumprimentar naturalmente)
2. ‚ùå Despeja TODOS os dados do contrato ap√≥s consulta (deveria s√≥ confirmar)
3. ‚ùå Repete dados a cada pergunta (deveria usar contexto)
4. ‚ùå Respostas muito longas e formais (deveria ser conciso)
5. ‚ùå N√£o reconhece perguntas fora do escopo (deveria ser direto)

SOLU√á√ÉO:
- Ajustar system prompt para ser mais natural e conciso
- Instruir para N√ÉO despejar todos os dados
- Instruir para usar contexto e n√£o repetir
- Limitar max_tokens para for√ßar concis√£o
- Adicionar exemplos de respostas curtas
""")


if __name__ == "__main__":
    simulate_conversation()
